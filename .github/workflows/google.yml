# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke

name: Build and Deploy to GKE

on:
  release:
    types: [created]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: my-first-cluster-1
  GKE_ZONE: us-central1-c
  DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  IMAGE: static-site

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    # Build the application
    - name: Build
      run: |-
        mvn clean install
    
    # Build the Docker images
    - name: BuildDocker
      run: |-
        docker build -t "gcr.io/team-programming-game-shop/shopping-cart:$GITHUB_SHA" \
          --build-arg DB_URL="$DB_URL_SHOPPING_CART" \
          --build-arg DB_USERNAME="$DB_USERNAME_SHOPPING_CART" \
          --build-arg DB_PASSWORD="$DB_PASSWORD_SHOPPING_CART" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" ./shopping-cart-service/.
        
        docker build -t "gcr.io/team-programming-game-shop/product-catalog:$GITHUB_SHA" \
          --build-arg DB_URL="$DB_URL_PRODUCT_CATALOG" \
          --build-arg DB_USERNAME="$DB_USERNAME_PRODUCT_CATALOG" \
          --build-arg DB_PASSWORD="$DB_PASSWORD_PRODUCT_CATALOG" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" ./product-catalog-service/.
        
        docker build -t "gcr.io/team-programming-game-shop/payment-management:$GITHUB_SHA" \
          --build-arg DB_URL="$DB_URL_PAYMENT_MANAGEMENT" \
          --build-arg DB_USERNAME="$DB_USERNAME_PAYMENT_MANAGEMENT" \
          --build-arg DB_PASSWORD="$DB_PASSWORD_PAYMENT_MANAGEMENT" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" ./payment-management-service/.
        
        docker build -t "gcr.io/team-programming-game-shop/order-management:$GITHUB_SHA" \
          --build-arg DB_URL="$DB_URL_ORDER_MANAGEMENT" \
          --build-arg DB_USERNAME="$DB_USERNAME_ORDER_MANAGEMENT" \
          --build-arg DB_PASSWORD="$DB_PASSWORD_ORDER_MANAGEMENT" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" ./order-management-service/.
        
        docker build -t "gcr.io/team-programming-game-shop/customers:$GITHUB_SHA" \
          --build-arg DB_URL="$DB_URL_CUSTOMERS" \
          --build-arg DB_USERNAME="$DB_USERNAME_CUSTOMERS" \
          --build-arg DB_PASSWORD="$DB_PASSWORD_CUSTOMERS" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" ./customers-service/.
        
        docker build -t "gcr.io/team-programming-game-shop/authentication:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" ./authentication-service/.

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/team-programming-game-shop/shopping-cart:$GITHUB_SHA"
        docker push "gcr.io/team-programming-game-shop/product-catalog:$GITHUB_SHA"
        docker push "gcr.io/team-programming-game-shop/payment-management:$GITHUB_SHA"
        docker push "gcr.io/team-programming-game-shop/order-management:$GITHUB_SHA"
        docker push "gcr.io/team-programming-game-shop/customers:$GITHUB_SHA"
        docker push "gcr.io/team-programming-game-shop/authentication:$GITHUB_SHA"
    
    # Deploy update to services
    - name: Deploy
      run: |-
        kubectl set image deployment shopping-cart shopping-cart="gcr.io/team-programming-game-shop/shopping-cart:$GITHUB_SHA"
        kubectl set image deployment product-catalog product-catalog="gcr.io/team-programming-game-shop/product-catalog:$GITHUB_SHA"
        kubectl set image deployment payment-management payment-management="gcr.io/team-programming-game-shop/payment-management:$GITHUB_SHA"
        kubectl set image deployment order-management order-management="gcr.io/team-programming-game-shop/order-management:$GITHUB_SHA"
        kubectl set image deployment customers customers="gcr.io/team-programming-game-shop/customers:$GITHUB_SHA"
        kubectl set image deployment authentication authentication="gcr.io/team-programming-game-shop/authentication:$GITHUB_SHA"
